diff --git a/kernel/Kconfig.hz b/kernel/Kconfig.hz
--- a/kernel/Kconfig.hz	2025-06-21 08:37:04.866760925 -0400
+++ b/kernel/Kconfig.hz	2025-06-21 09:10:40.215781306 -0400
@@ -40,6 +40,17 @@
 	 on SMP and NUMA systems and exactly dividing by both PAL and
 	 NTSC frame rates for video and multimedia work.
 
+	config HZ_500
+		bool "500 HZ"
+	help
+	 500 Hz is a solid middle ground timer frequency, giving you the
+         best of both worlds.
+
+	config HZ_750
+		bool "750 HZ"
+	help
+	 750 Hz leans more towards the 1000 HZ side of things, but still not 1000 Hz.
+
 	config HZ_1000
 		bool "1000 HZ"
 	help
@@ -53,6 +64,8 @@
 	default 100 if HZ_100
 	default 250 if HZ_250
 	default 300 if HZ_300
+	default 500 if HZ_500
+	default 750 if HZ_750
 	default 1000 if HZ_1000
 
 config MIN_BASE_SLICE_NS
diff --git a/arch/x86/Makefile b/arch/x86/Makefile
--- a/arch/x86/Makefile	2025-06-21 15:12:07.698231273 -0400
+++ b/arch/x86/Makefile	2025-06-21 15:12:24.796718972 -0400
@@ -74,9 +74,8 @@
 #
 #    https://gcc.gnu.org/bugzilla/show_bug.cgi?id=53383
 #
-KBUILD_CFLAGS += -mno-sse -mno-mmx -mno-sse2 -mno-3dnow -mno-avx
+KBUILD_CFLAGS += -march=native -mtune=native -mno-sse -mno-mmx -mno-sse2 -mno-3dnow -mno-avx
 KBUILD_RUSTFLAGS += --target=$(objtree)/scripts/target.json
-KBUILD_RUSTFLAGS += -Ctarget-feature=-sse,-sse2,-sse3,-ssse3,-sse4.1,-sse4.2,-avx,-avx2
 
 #
 # CFLAGS for compiling floating point code inside the kernel.
@@ -174,11 +173,8 @@
 	KBUILD_CFLAGS += $(call cc-option,-mskip-rax-setup)
 
 ifdef CONFIG_X86_NATIVE_CPU
-        KBUILD_CFLAGS += -march=native
-        KBUILD_RUSTFLAGS += -Ctarget-cpu=native
-else
-        KBUILD_CFLAGS += -march=x86-64 -mtune=generic
-        KBUILD_RUSTFLAGS += -Ctarget-cpu=x86-64 -Ztune-cpu=generic
+        KBUILD_CFLAGS += -march=native -mtune=native
+        KBUILD_RUSTFLAGS += -Ctarget-cpu=x86-64 -Ztune-cpu=generic
 endif
 
         KBUILD_CFLAGS += -mno-red-zone
diff --git a/init/Kconfig b/init/Kconfig
--- a/init/Kconfig
+++ b/init/Kconfig
@@ -1401,10 +1401,10 @@ choice
 	default CC_OPTIMIZE_FOR_PERFORMANCE

 config CC_OPTIMIZE_FOR_PERFORMANCE
-	bool "Optimize for performance (-O2)"
+	bool "Optimize for performance (-O3)"
 	help
 	  This is the default optimization level for the kernel, building
-	  with the "-O2" compiler flag for best performance and most
+	  with the "-O3" compiler flag for best performance and most
 	  helpful compile-time warnings.

 config CC_OPTIMIZE_FOR_SIZE
diff --git a/Makefile b/Makefile
--- a/Makefile	2025-06-21 15:12:07.271001059 -0400
+++ b/Makefile	2025-06-21 15:12:24.796877073 -0400
@@ -3,7 +3,7 @@
 PATCHLEVEL = 16
 SUBLEVEL = 0
 EXTRAVERSION = -rc2
-NAME = Baby Opossum Posse
+NAME = ETJAKEOC Zen2 Special Sauce
 
 # *DOCUMENTATION*
 # To see a list of typical targets execute "make help"
@@ -474,7 +474,7 @@ endif
 
 KBUILD_HOSTCFLAGS   := $(KBUILD_USERHOSTCFLAGS) $(HOST_LFS_CFLAGS) \
 		       $(HOSTCFLAGS) -I $(srctree)/scripts/include
-KBUILD_HOSTCXXFLAGS := -Wall -O2 $(HOST_LFS_CFLAGS) $(HOSTCXXFLAGS) \
+KBUILD_HOSTCXXFLAGS := -Wnoerror -O3 $(HOST_LFS_CFLAGS) $(HOSTCXXFLAGS) \
 		       -I $(srctree)/scripts/include
 KBUILD_HOSTRUSTFLAGS := $(rust_common_flags) -O -Cstrip=debuginfo \
 			-Zallow-features= $(HOSTRUSTFLAGS)
@@ -577,16 +576,11 @@
 KBUILD_AFLAGS   := -D__ASSEMBLY__ -fno-PIE
 
 KBUILD_CFLAGS :=
-KBUILD_CFLAGS += -std=gnu11
-KBUILD_CFLAGS += -fshort-wchar
-KBUILD_CFLAGS += -funsigned-char
-KBUILD_CFLAGS += -fno-common
-KBUILD_CFLAGS += -fno-PIE
-KBUILD_CFLAGS += -fno-strict-aliasing
+KBUILD_CFLAGS += -march=native -mtune=native -O3 -std=gnu11 -fshort-wchar -funsigned-char -fno-common -fno-PIE -fno-strict-aliasing
 
 KBUILD_CPPFLAGS := -D__KERNEL__
 KBUILD_RUSTFLAGS := $(rust_common_flags) \
-		    -Cpanic=abort -Cembed-bitcode=n -Clto=n \
+		    -Cpanic=abort -Cembed-bitcode=n -Clto \
 		    -Cforce-unwind-tables=n -Ccodegen-units=1 \
 		    -Csymbol-mangling-version=v0 \
 		    -Crelocation-model=static \
@@ -860,11 +854,11 @@
 KBUILD_CFLAGS	+= -fno-delete-null-pointer-checks
 
 ifdef CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE
-KBUILD_CFLAGS += -O2
-KBUILD_RUSTFLAGS += -Copt-level=2
+KBUILD_CFLAGS += -O3
+KBUILD_RUSTFLAGS += -Copt-level=3
 else ifdef CONFIG_CC_OPTIMIZE_FOR_SIZE
-KBUILD_CFLAGS += -Os
-KBUILD_RUSTFLAGS += -Copt-level=s
+KBUILD_CFLAGS += -O3
+KBUILD_RUSTFLAGS += -Copt-level=3
 endif
 
 # Always set `debug-assertions` and `overflow-checks` because their default
